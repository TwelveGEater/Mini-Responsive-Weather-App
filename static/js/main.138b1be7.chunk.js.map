{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","Search","evt","a","key","type","fetch","response","json","result","time","Date","getHours","className","placeholder","onChange","e","target","value","onKeyPress","onClick","icon","faSearch","undefined","main","temp","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Math","round","wind","speed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAKMA,G,MACA,oCADAA,EAEC,2CAuGQC,MApGf,WAAe,MAEcC,mBAAS,IAFvB,mBAENC,EAFM,KAECC,EAFD,OAGkBF,mBAAS,IAH3B,mBAGNG,EAHM,KAGGC,EAHH,KAKRC,EAAM,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,yDACE,UAAZD,EAAIE,KAAgC,UAAbF,EAAIG,KADjB,gCAEQC,MAAM,GAAD,OAAIZ,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IAFlE,cAETa,EAFS,gBAGMA,EAASC,OAHf,OAGTC,EAHS,OAIbT,EAAWS,GACXX,EAAS,IALI,2CAAH,sDAkCRY,GAAO,IAAIC,MAAOC,WAEtB,OACC,yBAAKC,UAAU,eACd,yBAAKA,UAAU,cACd,2BACCR,KAAK,OACLQ,UAAU,aACVC,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOlB,EAASkB,EAAEC,OAAOC,QACnCA,MAAOrB,EACPsB,WAAYlB,IAEb,yBAAKY,UAAU,iBACd,4BAAQO,QAASnB,GAChB,kBAAC,IAAD,CAAiBoB,KAAMC,SAGnB,IACP,yBACCT,eACkBU,IAAjBxB,EAAQyB,KAAqBd,GAAQ,GACpC,QACGA,EAAO,GACV,UACGA,EAAO,GACV,WACGA,EAAO,EACV,UACGA,EAAO,EACV,OAEA,QACGX,EAAQyB,KAAKC,KAAO,GACvB,OAEA,OAKF,gCACI1B,EAAQyB,MACV,yBAAKX,UAAU,gBACd,yBAAKA,UAAU,YACbd,EAAQ2B,KADV,KACkB3B,EAAQ4B,IAAIC,SAE9B,yBAAKf,UAAU,QAxED,SAACgB,GACpB,IAgBIC,EAFO,CAAE,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,MAAO,MAAO,OAE9ED,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAlBS,CACZ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAMkBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAkDNE,CAAY,IAAI3B,OACvC,yBAAKE,UAAU,eACd,yBAAKA,UAAU,QAAQ0B,KAAKC,MAAMzC,EAAQyB,KAAKC,MAA/C,SACA,yBAAKZ,UAAU,WAAWd,EAAQA,QAAQ,GAAGyB,MAC7C,yBAAKX,UAAU,eAAf,eAA0C0B,KAAKC,MAAMzC,EAAQ0C,KAAKC,OAAlE,eCxFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.138b1be7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\n\nconst api = {\n\tkey: 'df42bec29a2444cf30a1925671bbf8c6',\n\tbase: 'https://api.openweathermap.org/data/2.5/'\n};\n\nfunction App() {\n\t//const apiUrl = `api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid=${API_KEY}`;\n\tconst [ query, setQuery ] = useState('');\n\tconst [ weather, setWeather ] = useState('');\n\n\tconst Search = async (evt) => {\n\t\tif (evt.key === 'Enter' || evt.type === 'click') {\n\t\t\tlet response = await fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`);\n\t\t\tlet result = await response.json();\n\t\t\tsetWeather(result);\n\t\t\tsetQuery('');\n\t\t}\n\t};\n\n\tconst dateBuilder = (d) => {\n\t\tlet months = [\n\t\t\t'January',\n\t\t\t'February',\n\t\t\t'March',\n\t\t\t'April',\n\t\t\t'May',\n\t\t\t'June',\n\t\t\t'July',\n\t\t\t'August',\n\t\t\t'September',\n\t\t\t'October',\n\t\t\t'November',\n\t\t\t'December'\n\t\t];\n\t\tlet days = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec' ];\n\n\t\tlet day = days[d.getDay()];\n\t\tlet date = d.getDate();\n\t\tlet month = months[d.getMonth()];\n\t\tlet year = d.getFullYear();\n\n\t\treturn `${day} ${date} ${month} ${year}`;\n\t};\n\n\tlet time = new Date().getHours();\n\n\treturn (\n\t\t<div className=\"app-wrapper\">\n\t\t\t<div className=\"search-box\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"search-bar\"\n\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\tonChange={(e) => setQuery(e.target.value)}\n\t\t\t\t\tvalue={query}\n\t\t\t\t\tonKeyPress={Search}\n\t\t\t\t/>\n\t\t\t\t<div className=\"search-button\">\n\t\t\t\t\t<button onClick={Search}>\n\t\t\t\t\t\t<FontAwesomeIcon icon={faSearch} />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>{' '}\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\t\tweather.main === undefined ? time >= 22 ? (\n\t\t\t\t\t\t'night'\n\t\t\t\t\t) : time > 18 ? (\n\t\t\t\t\t\t'evening'\n\t\t\t\t\t) : time > 12 ? (\n\t\t\t\t\t\t'sunshine'\n\t\t\t\t\t) : time > 8 ? (\n\t\t\t\t\t\t'morning'\n\t\t\t\t\t) : time > 5 ? (\n\t\t\t\t\t\t'dawn'\n\t\t\t\t\t) : (\n\t\t\t\t\t\t'night'\n\t\t\t\t\t) : weather.main.temp > 16 ? (\n\t\t\t\t\t\t'warm'\n\t\t\t\t\t) : (\n\t\t\t\t\t\t'app'\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{/* \t\t\t(!!weather.main && (weather.main.temp >= 16 ? 'warm' : 'app')) || 'app'\t*/}\n\t\t\t\t<main>\n\t\t\t\t\t{!!weather.main && (\n\t\t\t\t\t\t<div className=\"location-box\">\n\t\t\t\t\t\t\t<div className=\"location\">\n\t\t\t\t\t\t\t\t{weather.name}, {weather.sys.country}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"date\">{dateBuilder(new Date())}</div>\n\t\t\t\t\t\t\t<div className=\"weather-box\">\n\t\t\t\t\t\t\t\t<div className=\"temp\">{Math.round(weather.main.temp)}Â°C</div>\n\t\t\t\t\t\t\t\t<div className=\"weather\">{weather.weather[0].main}</div>\n\t\t\t\t\t\t\t\t<div className=\"wind__speed\">Wind speed: {Math.round(weather.wind.speed)}km/h </div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}